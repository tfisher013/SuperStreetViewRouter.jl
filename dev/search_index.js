var documenterSearchIndex = {"docs":
[{"location":"algorithm/#Algorithm","page":"Algorithm","title":"Algorithm","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"SuperStreetViewRouter.jl uses a depth searched-enhanced greedy algorithm with optimizations to maximize traversed distance over the provided city input file. The algorithm's implementation and ideas for how it can be improved are described below.","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Before continuing, it will be helpful to first familiarize yourself with the details of the Google 2014 HashCode problem, as references to aspects of the problem will be made throughout.","category":"page"},{"location":"algorithm/#Depth-Searched-Enhanced-Greedy-BFS","page":"Algorithm","title":"Depth Searched-Enhanced Greedy BFS","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"The algorithm performs the same routine for each car sequentially.","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Enumerate all paths of depth edges from current junction that can be traversed in remaining time.\nSelect the path which generates the greatest value.\nTravel n_steps along the selected path, updating remaining time with the travel cost.\nRepeat from 1 until remaining time prohibits further travel.","category":"page"},{"location":"algorithm/#Path-Value","page":"Algorithm","title":"Path Value","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"To compare paths in terms of the benefit they will confer on itinerary score, we use the following metric:","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"The value of a path consisting of a list of n junctions is given by","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"sum_i=1^n-1 d_ii+1","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"where d_i i+1 is the penalized distance (see information on penalties below) of traversing the street between junctions i and i+1.","category":"page"},{"location":"algorithm/#Traversal-Penalty","page":"Algorithm","title":"Traversal Penalty","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Since streets which have already been traversed once no longer add to the final itinerary score, the algorithm incorporates  a traversal penalty to artificially deflate the distance of traversed streets when scoring paths. The idea is that streets  with no or a low number of traversals will be selected over streets with a high number of traversals.","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Our penalty function is of the following form:","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"f(x n p) = x * p^n","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"x","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"is the distance of the street assuming 0 traversals n is the number of times the street has been traversed p is the parameter elapsed_street_penalty","category":"page"},{"location":"algorithm/#Search-Parameters","page":"Algorithm","title":"Search Parameters","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"All tunable algorithm parameters can be provided when calling solve_graph_greedy():","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"elapsed_street_penalty controls the penalization accrued by traversed streets.\ndepth controls the maximum depth to which each BFS invocation will run.\nn_steps is the number of street edges traversed once an optimal path of depth depth has been determined. Note that \nn_steps leq depth as the depth of our BFS limits how many steps forward can be taken per iteration.","category":"page"},{"location":"algorithm/#Analysis","page":"Algorithm","title":"Analysis","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"!!!In Progress!!!","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"The upper bound of the algorithm can be described as the maximum score achievable on a given city data of which we know some  information. In this section, a reasonable upper bound will be derived beginning from simple assumptions and gradually accounting for increasing complexity.","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Let's begin by considering a City object whose streets so exceed the number of cars and total duration that all cars can run freely  without fear of overlap. Here we assume that the traversal penalty described above is sufficient to prevent overlap in the presence  of an abudance of available streets. With all textnumtextunderscoretextcars cars running for texttotaltextunderscoretextduration  seconds each, there are textnumtextunderscoretextcars cdot texttotaltextunderscoretextduration seconds during which  streets will be traversed.","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"To generate a distance score from the available time, we introduce a normalized average rate for the City object as described below:","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"textnormtextunderscoretextavgtextunderscoretextspeed = fracdisplaystyle sum_s in S s_d cdot fracs_ds_tdisplaystyle sum_s in S s_d","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"S","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"is the set of streets in the the city","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"s_d","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"is the distance of street s in S","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"s_t","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"is the duration of street s in S","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Using this value as an approximation for the typical speed at which a car can traverse any given street in the City object, we arrive  at a idyllic upper bound b_u (measured in meters) of","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"b_u leq textnumtextunderscoretextcars cdot texttotaltextunderscoretextduration cdot textnormtextunderscoretextavgtextunderscoretextspeed","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Now applying this model to a more general City object requires accounting for two possibilities related to scarcity:","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Suppose a City object contains less distance in its streets than the value obtained from the expression above?\nSuppose cars are forced to overlap one another in the course of their paths?","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Handling the first situation is simple. We cap our bound at the total distance of the City object:","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"b_u leq min(textnumtextunderscoretextcars cdot texttotaltextunderscoretextduration cdot textnormtextunderscoretextavgtextunderscoretextspeed d_total)","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"where d_total=sum_s in S s_d","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"To address overlap, consider how its effect ranges from absolute (the score of n cars is equivalent to the score of  1) to non-existent (ideal model above). Expressed in terms of our quantities,","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"$","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"\\min(\\text{total}\\textunderscore\\text{duration} \\cdot \\text{norm}\\textunderscore\\text{avg}\\textunderscore\\text{speed},  d{total}) \\leq b{u} \\leq \\min(\\text{num}\\textunderscore\\text{cars} \\cdot \\text{total}\\textunderscore\\text{duration} \\cdot \\text{norm}\\textunderscore\\text{avg}\\textunderscore\\text{speed}, d_{total}) $","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"To simplify our expression, let's condense the effect of overlap into a single factor, o_f, like so:","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"b_u leq min(textnumtextunderscoretextcars cdot texttotaltextunderscoretextduration cdot textnormtextunderscoretextavgtextunderscoretextspeed cdot o_f d_total)","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"where frac1textnumtextunderscoretextcars leq o_f leq 1","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"A simple way to construct o_f is to use some version of a sign-like function which varies between frac1textnumtextunderscoretextcars and 1 in value. tanh(x) does the trick, and shifted and scaled between our values it becomes","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"o_f=frac12 cdot left(1-frac1textnumtextunderscoretextcars right) tanh(x) + frac12 cdot left( 1 + frac1textnumtextunderscoretextcars right) ","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"The input variable to the tanh function must be a measure of the amount of overlap we expect in a city of fixed size. To represent this, we introduce the quantity textnumtextunderscoretextsupportedtextunderscoretextcars = fracd_totalt_total cdot textnormtextunderscoretextavgtextunderscoretextspeed. The normalized difference between the number of cars the city can support and the number of cars in the input file is what we use in our overlap factor value:","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"o_f=frac12 cdot left(1-frac1textnumtextunderscoretextcars right) tanhleft(fractextnumtextunderscoretextsupportedtextunderscoretextcars-textnumtextunderscoretextcarstextnumtextunderscoretextsupportedtextunderscoretextcarsright) + frac12 cdot left( 1 + frac1textnumtextunderscoretextcars right) ","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Combining all the components above, we arrive at the following inequality for all distance scores d from our algorithm:","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"d leq minleft(textnumtextunderscoretextcars cdot texttotaltextunderscoretextduration cdot textnormtextunderscoretextavgtextunderscoretextspeed cdot frac12 cdot left(1-frac1textnumtextunderscoretextcars right) tanhleft(fractextnumtextunderscoretextsupportedtextunderscoretextcars-textnumtextunderscoretextcarstextnumtextunderscoretextsupportedtextunderscoretextcarsright) + frac12 cdot left( 1 + frac1textnumtextunderscoretextcars right) d_totalright)","category":"page"},{"location":"algorithm/#Experimental-Confirmation","page":"Algorithm","title":"Experimental Confirmation","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Since we have a well defined upper bound for any solution from SuperStreetViewRouter.jl and a solver, experimental verification is easy to generate. See graphs below which plot solution scores from the library against upper bound values, varying 1 parameter at a time.","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"!!!In Progress!!!","category":"page"},{"location":"algorithm/#Areas-For-Improvement","page":"Algorithm","title":"Areas For Improvement","text":"","category":"section"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"There are several ideas relating to BFS that could likely improve performance. Performance improvements themselves do not  increase score, but allow for increased depth (which may augment score) in a manageable amount of time.","category":"page"},{"location":"algorithm/","page":"Algorithm","title":"Algorithm","text":"Trimming BFS set periodically either by value, randomness, or the similarity between paths.\nPre-allocating and considering only a set number of length depth paths per BFS routine to decrease runtime memory allocations.\nApplying threading to each iteration of BFS as next-step paths are generated independently.","category":"page"},{"location":"","page":"API","title":"API","text":"CurrentModule = SuperStreetViewRouter","category":"page"},{"location":"#SuperStreetViewRouter","page":"API","title":"SuperStreetViewRouter","text":"","category":"section"},{"location":"","page":"API","title":"API","text":"Documentation for SuperStreetViewRouter.","category":"page"},{"location":"","page":"API","title":"API","text":"","category":"page"},{"location":"","page":"API","title":"API","text":"Modules = [SuperStreetViewRouter]","category":"page"},{"location":"#SuperStreetViewRouter.CityData","page":"API","title":"SuperStreetViewRouter.CityData","text":"CityData(total_duration::Int, nb_cars::Int, starting_junction::Int)\n\nA struct that holds the metadata for a city. Has constructor(s)\n\nCityData(c::City)\n\n\n\n\n\n","category":"type"},{"location":"#SuperStreetViewRouter.CityGraph","page":"API","title":"SuperStreetViewRouter.CityGraph","text":"CityGraph(data::CityData, graph::ValOutDiGraph)\n\nA graph representation of a City object. The graph is a SimpleValueGraphs.jl ValOutDiGraph, and the data is a CityData object.\n\n\n\n\n\n","category":"type"},{"location":"#SuperStreetViewRouter.StreetData","page":"API","title":"SuperStreetViewRouter.StreetData","text":"StreetData(duration::Int, value::Int, id::Int)\n\nStructure storing the data required for greedy algorithm in edges of city graph. Has constructors\n\nStreetData(street::Street)\nStreetData(street::Street, id::Int)\n\n\n\n\n\n","category":"type"},{"location":"#SuperStreetViewRouter.apply_penalty-Tuple{Float64, Int64, Float64}","page":"API","title":"SuperStreetViewRouter.apply_penalty","text":"apply_penalty(pre_penalty_value::Float64, num_traversals::Int64, elapsed_street_penalty::Float64)::Float64\n\nApplies a traversal penalty to a provided value.\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.create_input_graph-Tuple{HashCode2014.City}","page":"API","title":"SuperStreetViewRouter.create_input_graph","text":"create_input_graph(city::City)\n\nReturns a SimpleWeightedDiGraph representing the provided City object in a directed graph.  Graph vertices are Junction indices (as stored in the City object) and edges are weighted by street lengths.\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.find_best_path-Tuple{Any, Any, Any}","page":"API","title":"SuperStreetViewRouter.find_best_path","text":"find_best_path(possible_paths, traversed_streets, elapsed_street_penalty)\n\nReturns the best path to traverse from the provided list of possible paths. The best path is the one with the highest value considering the number of times each street has been traversed with the provided penalty\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.get_path_value-Tuple{Any, Any, Any}","page":"API","title":"SuperStreetViewRouter.get_path_value","text":"get_path_value(path, traversed_streets, elapsed_street_penalty)\n\nReturns the value of the provided path, taking into account the number of times each street has been traversed with the provided penalty\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.get_possible_paths-NTuple{4, Any}","page":"API","title":"SuperStreetViewRouter.get_possible_paths","text":"    get_possible_paths(city_graph, current_junction, remaining_time, depth)\n\nreturns list of tuples\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.get_possible_streets-Tuple{Any, Any, Any}","page":"API","title":"SuperStreetViewRouter.get_possible_streets","text":"get_possible_streets(city_graph)\n\nReturns a list of all streets that can be traversed from the provided junction. The streets are tuples of (endjunction, streetdata)\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.get_total_city_cost-Tuple{HashCode2014.City}","page":"API","title":"SuperStreetViewRouter.get_total_city_cost","text":"get_total_city_cost(city::City)\n\nReturns the total time (in seconds) required to traverse all streets of the provided city.\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.get_total_city_length-Tuple{HashCode2014.City}","page":"API","title":"SuperStreetViewRouter.get_total_city_length","text":"get_total_city_length(city::City)\n\nReturns the total length (in meters) of all streets in the provided city.\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.path_time-Tuple{Any}","page":"API","title":"SuperStreetViewRouter.path_time","text":"path_time(path)\n\nReturns the time it takes to traverse the provided path\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.solve_graph_greedy","page":"API","title":"SuperStreetViewRouter.solve_graph_greedy","text":"solve_graph_greedy(city::City=read_city())\n\nGenerates a greedy solution to the provided city, or uses the default city if none is provided. The greedy algorithm can be described as follows:     - At each junction, the car will choose to traverse the street with the     highest \"value\" = length / time.     - Traversed streets will be recorded.     - Traversed streets will have their length decreased by a constant factor     to discourage but allow usage. This constant is likely responsive to     optimization.\n\nInefficient due to only routing a single path at a time. Implementing a shared list of traversed streets and dedicating a separate thread to each path would likely improve performance.\n\n\n\n\n\n","category":"function"},{"location":"example_usage/#Example-Usage","page":"Example Usage","title":"Example Usage","text":"","category":"section"},{"location":"example_usage/#City-Data","page":"Example Usage","title":"City Data","text":"","category":"section"},{"location":"example_usage/","page":"Example Usage","title":"Example Usage","text":"The SuperStreetViewRouter.jl solver accepts a City object which can be generated using the HashCode2014.jl dependency or read in from a local file. ","category":"page"},{"location":"example_usage/","page":"Example Usage","title":"Example Usage","text":"using HashCode2014\n\n# using default city data file\njulia> city = read_city()\n\n# using local city data file\njulia> city = read_city(\"path/to/city/file.txt\")","category":"page"},{"location":"example_usage/#Generating-Solution","page":"Example Usage","title":"Generating Solution","text":"","category":"section"},{"location":"example_usage/","page":"Example Usage","title":"Example Usage","text":"The function solve_graph_greedy() generates a Solution object describing an optimal itinerary for the provided City object.","category":"page"},{"location":"example_usage/","page":"Example Usage","title":"Example Usage","text":"using HashCode2014, SuperStreetViewRouter\n\n# generate solution using default city object and parameters\njulia> solution = solve_graph_greedy()\n\n# generate solution with custom city object and parameters\njulia> solution = solve_graph_greedy(city; elapsed_street_penalty=0.25, depth=6, n_steps=3)","category":"page"},{"location":"example_usage/#Evaluating-Solution","page":"Example Usage","title":"Evaluating Solution","text":"","category":"section"},{"location":"example_usage/","page":"Example Usage","title":"Example Usage","text":"The feasibility, distance, and a visual representation of a solution can be obtained using fuctions from the HashCode2014.jl dependency:","category":"page"},{"location":"example_usage/","page":"Example Usage","title":"Example Usage","text":"using HashCode2014\n\n# determine feasibility of solution\njulia> is_feasible(solution, city)\n\n# determine distance of solution\njulia> total_distance(solution, city)\n\n# generate visual representation of solution\njulia> plot_streets(city_object, solution; path=\"solution_plot.html\")","category":"page"}]
}
