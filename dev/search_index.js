var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SuperStreetViewRouter","category":"page"},{"location":"#SuperStreetViewRouter","page":"Home","title":"SuperStreetViewRouter","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SuperStreetViewRouter.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SuperStreetViewRouter]","category":"page"},{"location":"#SuperStreetViewRouter.CityData","page":"Home","title":"SuperStreetViewRouter.CityData","text":"CityData(total_duration::Int, nb_cars::Int, starting_junction::Int)\n\nA struct that holds the metadata for a city. Has constructor(s)\n\nCityData(c::City)\n\n\n\n\n\n","category":"type"},{"location":"#SuperStreetViewRouter.CityGraph","page":"Home","title":"SuperStreetViewRouter.CityGraph","text":"CityGraph(data::CityData, graph::ValOutDiGraph)\n\nA graph representation of a City object. The graph is a SimpleValueGraphs.jl ValOutDiGraph, and the data is a CityData object.\n\n\n\n\n\n","category":"type"},{"location":"#SuperStreetViewRouter.StreetData","page":"Home","title":"SuperStreetViewRouter.StreetData","text":"StreetData(duration::Int, value::Int, id::Int)\n\nStructure storing the data required for greedy algorithm in edges of city graph. Has constructors\n\nStreetData(street::Street)\nStreetData(street::Street, id::Int)\n\n\n\n\n\n","category":"type"},{"location":"#SuperStreetViewRouter.apply_penalty-Tuple{Float64, Int64, Float64}","page":"Home","title":"SuperStreetViewRouter.apply_penalty","text":"apply_penalty(pre_penalty_value::Float64, num_traversals::Int64, elapsed_street_penalty::Float64)::Float64\n\nApplies a traversal penalty to a provided value.\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.benchmark_random_walk_solutions","page":"Home","title":"SuperStreetViewRouter.benchmark_random_walk_solutions","text":"benchmark_random_walk_solution(test_iterations::Int64=10)\n\nGenerates the provided number of random walk solutions and displays statistics on the lengths of the results. Intended to provide a lower bound upon which to  improve.\n\n\n\n\n\n","category":"function"},{"location":"#SuperStreetViewRouter.create_input_graph-Tuple{HashCode2014.City}","page":"Home","title":"SuperStreetViewRouter.create_input_graph","text":"create_input_graph(city::City)\n\nReturns a SimpleWeightedDiGraph representing the provided City object in a directed graph.  Graph vertices are Junction indices (as stored in the City object) and edges are weighted by street lengths.\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.find_best_path-Tuple{Any, Any, Any}","page":"Home","title":"SuperStreetViewRouter.find_best_path","text":"find_best_path(possible_paths, traversed_streets, elapsed_street_penalty)\n\nReturns the best path to traverse from the provided list of possible paths. The best path is the one with the highest value considering the number of times each street has been traversed with the provided penalty\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.find_best_street-Tuple{Any, Any, Any}","page":"Home","title":"SuperStreetViewRouter.find_best_street","text":"find_best_street(possible_streets, traversed_streets, elapsed_street_penalty)\n\nReturns the best street to traverse from the provided list of possible streets. The best street is the one with the highest value, or the one with the highest value * elapsedstreetpenalty ^ times traversed if it has been traversed before.\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.get_path_value-Tuple{Any, Any, Any}","page":"Home","title":"SuperStreetViewRouter.get_path_value","text":"get_path_value(path, traversed_streets, elapsed_street_penalty)\n\nReturns the value of the provided path, taking into account the number of times each street has been traversed with the provided penalty\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.get_possible_paths-NTuple{4, Any}","page":"Home","title":"SuperStreetViewRouter.get_possible_paths","text":"    get_possible_paths(city_graph, current_junction, remaining_time, depth)\n\nreturns list of tuples\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.get_possible_streets-Tuple{Any, Any, Any}","page":"Home","title":"SuperStreetViewRouter.get_possible_streets","text":"get_possible_streets(city_graph)\n\nReturns a list of all streets that can be traversed from the provided junction. The streets are tuples of (endjunction, streetdata)\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.get_total_city_cost-Tuple{HashCode2014.City}","page":"Home","title":"SuperStreetViewRouter.get_total_city_cost","text":"get_total_city_cost(city::City)\n\nReturns the total time (in seconds) required to traverse all streets of the provided city.\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.get_total_city_length-Tuple{HashCode2014.City}","page":"Home","title":"SuperStreetViewRouter.get_total_city_length","text":"get_total_city_length(city::City)\n\nReturns the total length (in meters) of all streets in the provided city.\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.path_time-Tuple{Any}","page":"Home","title":"SuperStreetViewRouter.path_time","text":"path_time(path)\n\nReturns the time it takes to traverse the provided path\n\n\n\n\n\n","category":"method"},{"location":"#SuperStreetViewRouter.solve_graph_greedy","page":"Home","title":"SuperStreetViewRouter.solve_graph_greedy","text":"solve_graph_greedy(city::City=read_city())\n\nGenerates a greedy solution to the provided city, or uses the default city if none is provided. The greedy algorithm can be described as follows:     - At each junction, the car will choose to traverse the street with the     highest \"value\" = length / time.     - Traversed streets will be recorded.     - Traversed streets will have their length decreased by a constant factor     to discourage but allow usage. This constant is likely responsive to     optimization.\n\nInefficient due to only routing a single path at a time. Implementing a shared list of traversed streets and dedicating a separate thread to each path would likely improve performance.\n\n\n\n\n\n","category":"function"}]
}
